<?php

use Drupal\Component\Plugin\PluginManagerInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\entity_access_policies\LockInterface;
use Drupal\entity_access_policies\PolicyInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_access().
 *
 * Shim to extend entity_access_policies to all entities. Will NOT work with
 * listing-like content views that rely solely on node_access.
 */
function entity_access_policies_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $policy_manager = Drupal::service('plugin.manager.entity_access_policy');
  /* @var \Drupal\Component\Plugin\PluginManagerInterface $policy_manager */

  $definitions = $policy_manager->getDefinitions();

  foreach (array_keys($definitions) as $policy_id) {
    $policy = $policy_manager->createInstance($policy_id);

    if ($policy->applies($entity)) {
      $locks = $policy->getLocks($entity);
      /* @var \Drupal\entity_access_policies\LockInterface[] $locks */

      $filtered = array_filter($locks, function ($lock) use ($operation) {
        return in_array($operation, $lock->getOperations());
      });

      if (!empty($filtered)) {
        $keys = $policy->getKeys($account);

        foreach ($filtered as $lock) {
          if (in_array($lock->id(), $keys)) {
            return AccessResult::allowed()->cachePerUser();
          }
        }
      }

      return AccessResult::forbidden()->cachePerUser();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access_records().
 *
 * Shims Entity Access Policies in for just nodes. Later, the policies code
 * can be refactored into an entity type agnostic system.
 */
function entity_access_policies_node_access_records(NodeInterface $node) {
  $policy_manager = Drupal::service('plugin.manager.entity_access_policy');
  /* @var \Drupal\Component\Plugin\PluginManagerInterface $policy_manager */

  $access_records = [];
  $definitions = $policy_manager->getDefinitions();
  foreach (array_keys($definitions) as $policy_id) {
    $policy = $policy_manager->createInstance($policy_id);

    if ($policy->applies($node)) {
      $locks = $policy->getLocks($node);
      /* @var \Drupal\entity_access_policies\LockInterface[] $locks */
      foreach ($locks as $lock) {
        $access_records[] = _entity_access_policies_lock_to_grant($policy_id, $lock);
      }
    }
  }

  return $access_records;
}

/**
 * Implements hook_node_access_records().
 *
 * Shims Entity Access Policies in for just nodes. Later, the policies code
 * can be refactored into an entity type agnostic system.
 */
function entity_access_policies_node_grants(AccountInterface $account, $op) {
  $policy_manager = Drupal::service('plugin.manager.entity_access_policy');
  /* @var \Drupal\Component\Plugin\PluginManagerInterface $policy_manager */

  $grants = [];
  $definitions = $policy_manager->getDefinitions();
  foreach (array_keys($definitions) as $policy_id) {
    $policy = $policy_manager->createInstance($policy_id);
    $realm = sprintf('entity_access_policies:%s', $policy_id);
    $grants[$realm] = $policy->getKeys($account);
  }

  return $grants;
}

/**
 * Simple helper function which maps Locks to node access record arrays.
 *
 * This is only necessary until the node_access system is replaced with a
 * more generic entity access system.
 */
function _entity_access_policies_lock_to_grant($policy_id, LockInterface $lock) {
  $grant = [
    'realm' => sprintf('entity_access_policies:%s', $policy_id),
    'gid' => $lock->id(),
    'langcode' => $lock->getLanguage()->getId(),
  ];

  $allowed_operations = $lock->getOperations();
  foreach (['view', 'update', 'delete'] as $operation) {
    $grant['grant_' . $operation] = (int) in_array($operation, $allowed_operations);
  }

  return $grant;
}
